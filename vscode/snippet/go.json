{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// --- often use --- //
	"main": {
		"prefix": "main",
		"body": [
			"package main",
			"",
			"import (",
			"	\"fmt\"",
			")",
			"",
			"func main() {",
			"	run()",
			"}",
			"",
			"func run() error {",
			"	return nil",
			"}",
		],
		"description": "hello world template"		
	},
	"error handling": {
		"prefix": "iferr",
		"body": [
			"if err != nil {",
			"  return err",
			"}"
		],
		"description": "if err != nil statement"
	},
	"json encode": {
		"prefix": "jsonencode",
		"body": [
			"	person := struct {",
			"		ID   int",
			"		Name string",
			"	}{",
			"		ID:   1,",
			"		Name: \"tarou\",",
			"	}",
			"	var buf bytes.Buffer",
			"	enc := json.NewEncoder(&buf)",
			"	if err := enc.Encode(person); err != nil {",
			"		panic(err)",
			"	}"
		],
		"description": "json encode"
	},
	"test": {
		"prefix": "test",
		"body": [
			"	tests := []struct {",
			"		name       string",
			"		args       []string",
			"		want       int",
			"		assertion  assert.ErrorAssertionFunc",
			"	}{",
			"		{",
			"			name:       \"$1\",",
			"			args:       []string{\"\"},",
			"			want:       1,",
			"			assertion:  assert.NoError,",
			"		},",
			"	}",
			"",
			"	for _, tt := range tests {",
			"		tt := tt",
			"		t.Run(tt.name, func(t *testing.T) {",
			"			actual, err := function(tt.args)",
			"			tt.assertion(t, err)",
			"			assert.Equal(t, tt.want, actual)",
			"		})",
			"	}",
		],
		"description": "table test"
	},
	// --- often use --- //

	// --- sample code --- //
	"simple server": {
		"prefix": "httpserver",
		"body": [
			"package main",
			"",
			"import (",
			"	\"net/http\"",
			")",
			"",
			"func handler(w http.ResponseWriter, r *http.Request) {",
			"	http.Error(w, \"occur error\", 500)",
			"}",
			"",
			"func main() {",
			"	http.HandleFunc(\"/\", handler)",
			"	http.ListenAndServe(\":8080\", nil)",
			"}"
		],
		"description": "simple http server"
	},
	"http json server": {
		"prefix": "jsonserver",
		"body": [
			"package main",
			"",
			"import (",
			"	\"bytes\"",
			"	\"encoding/json\"",
			"	\"fmt\"",
			"	\"net/http\"",
			")",
			"",
			"func handler(w http.ResponseWriter, r *http.Request) {",
			"	person := struct {",
			"		ID   int",
			"		Name string",
			"	}{",
			"		ID:   1,",
			"		Name: \"tarou\",",
			"	}",
			"	var buf bytes.Buffer",
			"	enc := json.NewEncoder(&buf)",
			"	if err := enc.Encode(person); err != nil {",
			"		panic(err)",
			"	}",
			"",
			"	fmt.Fprintf(w, buf.String())",
			"}",
			"",
			"func main() {",
			"	http.HandleFunc(\"/\", handler)",
			"	http.ListenAndServe(\":8080\", nil)",
			"}",
			""
		],
		"description": "simple json server"
	}
	// --- sample code --- //
}